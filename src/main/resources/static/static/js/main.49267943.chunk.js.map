{"version":3,"sources":["actions/projectActions.js","actions/types.js","components/Project/ProjectItem.js","components/Project/CreateProjectButton.js","components/Dashboard.js","securityUtils/setJWTToken.js","actions/SecurityActions.js","components/Layout/Header.js","utils/utils.js","components/Project/AddProject.js","reducers/errorReducer.js","reducers/projectReducer.js","reducers/backlogReducer.js","reducers/securityReducer.js","reducers/index.js","store.js","components/Project/UpdateProject.js","components/ProjectBoard/ProjectTasks/ProjectTask.js","actions/backlogActions.js","components/ProjectBoard/Backlog.js","components/ProjectBoard/ProjectBoard.js","components/ProjectBoard/ProjectTasks/AddProjectTask.js","components/ProjectBoard/ProjectTasks/UpdateProjectTask.js","components/Layout/Landing.js","components/UserManagement/Register.js","components/UserManagement/Login.js","securityUtils/SecureRoute.js","App.js","serviceWorker.js","index.js"],"names":["createProject","project","history","dispatch","a","axios","post","push","type","payload","response","data","ProjectItem","onDeleteClick","id","props","deleteProject","this","className","projectIdentifier","projectName","description","to","onClick","Component","connect","window","confirm","delete","CreateProjectButton","Fragment","Dashboard","getProjects","projects","map","key","state","get","res","setJWTToken","token","defaults","headers","common","logout","localStorage","removeItem","Header","location","href","headerLinks","security","validToken","user","userIsNotAuthenticated","userIsAuthenticated","fullName","data-toggle","data-target","convertDateToBase","dateToConvert","arr","split","convertDateFromBase","AddProject","onChange","event","setState","target","name","value","onSubmit","preventDefault","newProject","start_date","end_date","errors","classnames","placeholder","nextProps","prevState","initialState","ErrorReducer","action","ProjectReducer","filter","project_tasks","project_task","BacklogReducer","pt","projectSequence","booleanActionPayload","SecurityReducer","combineReducers","backlog","middleware","thunk","ReactReduxDevTools","__REDUX_DEVTOOLS_EXTENSION__","store","navigator","userAgent","includes","createStore","rootReducer","compose","applyMiddleware","UpdateProject","updateProject","match","params","getProject","console","log","disabled","ProjectTask","onDeleteCalling","backlog_id","pt_id","deleteProjectTask","priorityString","priorityClass","priority","summary","acceptanceCriteria","Backlog","tasks","todoItems","inProgressItems","doneItems","i","length","status","ProjectBoard","getBacklog","boardContent","projectNotFound","role","boardAlgo","AddProjectTask","newTask","dueDate","addProjectTask","protoTypes","PropTypes","func","isRequired","object","UpdateProjectTask","updatedProjectTask","create_At","updateProjectTask","getProjectTask","patch","Landing","Register","newUser","username","password","confirmPassword","createNewUser","nexProps","Login","LoginRequest","login","setItem","decoded","JwtDecode","component","otherProps","render","jwtToken","getItem","decoded_jwtToken","currentTime","Date","now","exp","App","exact","path","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.49267943.chunk.js","sourcesContent":["import axios from 'axios';\nimport { GET_ERRORS, GET_PROJECTS, GET_PROJECT, DELETE_PROJECT } from './types';\n\nexport const createProject = (project, history) => async dispatch => {\n\n    try {\n    \n        await axios.post('/api/project', project);\n        history.push('/dashboard');\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        });\n\n    } catch (error) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: error.response.data\n        });\n    }\n};\n\nexport const getProjects = () => async dispatch => {\n\n    const res = await axios.get('/api/project/all');\n    dispatch({\n        type: GET_PROJECTS,\n        payload: res.data\n    })\n\n}\n\nexport const getProject = (id, history) => async dispatch => {\n\n    try {\n        const res = await axios.get(`/api/project/${id}`);\n        dispatch({\n            type: GET_PROJECT,\n            payload: res.data\n        })\n    } catch (error) {\n        history.push('/dashboard');\n    }\n}\n\nexport const deleteProject = id => async dispatch => {\n\n    if (window.confirm(\"Are you sure to delete this project ?\")) {\n\n        await axios.delete(`/api/project/${id}`);\n        dispatch({\n            type: DELETE_PROJECT,\n            payload: id\n        });\n    }\n\n}","export const GET_ERRORS = 'GET_ERRORS';\nexport const GET_PROJECTS = 'GET_PROJECTS';\nexport const GET_PROJECT = 'GET_PROJECT';\nexport const DELETE_PROJECT = 'DELETE_PROJECT';\n\n\n// BACKLOG Actions\nexport const GET_BACKLOG = 'GET_BACKLOG';\nexport const GET_PROJECT_TASK = 'GET_PROJECT_TASK';\nexport const DELETE_PROJECT_TASK = 'DELETE_PROJECT_TASK';\n\n// Security actions\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteProject } from '../../actions/projectActions';\n\nclass ProjectItem extends Component {\n\n    onDeleteClick = id => {\n\n        this.props.deleteProject(id);\n    }\n\n    render() {\n\n        const {project} = this.props;\n\n        return (\n            <div className=\"container\">\n                <div className=\"card card-body bg-light mb-3\">\n                    <div className=\"row\">\n                        <div className=\"col-2\">\n                            <span className=\"mx-auto\">{project.projectIdentifier}</span>\n                        </div>\n                        <div className=\"col-lg-6 col-md-4 col-8\">\n                            <h3>{project.projectName}</h3>\n                            <p>{project.description}</p>\n                        </div>\n                        <div className=\"col-md-4 d-none d-lg-block\">\n                            <ul className=\"list-group\">\n                                <Link to={`/projectBoard/${project.projectIdentifier}`}>\n                                    <li className=\"list-group-item board\">\n                                        <i className=\"fa fa-flag-checkered pr-1\"> Project Board </i>\n                                    </li>\n                                </Link>\n                                <Link to={`/updateProject/${project.projectIdentifier}`}>\n                                    <li className=\"list-group-item update\">\n                                        <i className=\"fa fa-edit pr-1\"> Update Project Info</i>\n                                    </li>\n                                </Link>\n                                    <li className=\"list-group-item delete\" onClick={() => this.onDeleteClick(project.projectIdentifier)}>\n                                        <i className=\"fa fa-minus-circle pr-1\"> Delete Project</i>\n                                    </li>\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nProjectItem.propTypes = {\n    deleteProject: PropTypes.func.isRequired\n}\n\nexport default connect(null, {deleteProject})(ProjectItem);","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst CreateProjectButton = () => {\n    return (\n        <React.Fragment>\n            <Link to=\"/addProject\" className=\"btn btn-lg btn-info\">\n                Create a Project\n            </Link>\n        </React.Fragment>\n    )\n}\n\nexport default CreateProjectButton;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ProjectItem from './Project/ProjectItem';\nimport CreateProjectButton from './Project/CreateProjectButton';\nimport { connect } from 'react-redux';\nimport { getProjects } from '../actions/projectActions';\n\n\nclass Dashboard extends Component {\n\n\n    componentDidMount() {\n\n        this.props.getProjects();\n    }\n\n    render() {\n\n        const {projects} = this.props.project;\n\n        return (\n            <div className=\"projects\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <h1 className=\"display-4 text-center\">Projects</h1>\n                            <br />\n\n                            <CreateProjectButton/>\n\n                            <br />\n                            <hr />\n\n                            {\n                                projects.map(project => <ProjectItem key={project.id} project={project} />)\n                            }\n                            \n        \n                        </div>\n                    </div>\n                </div>\n            </div>\n    \n        )\n    }\n}\n\nDashboard.propTypes = {\n    project: PropTypes.object.isRequired,\n    getProjects: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    project: state.project\n})\n\nexport default connect(mapStateToProps, {getProjects})(Dashboard);","\nimport axios from 'axios';\n\nconst setJWTToken = token => {\n\n    if (token) {\n        axios.defaults.headers.common['Authorization'] = token;\n    } else {\n        delete axios.defaults.headers.common['Authorization'];\n    }\n};\n\nexport default setJWTToken;","import axios from 'axios';\nimport { SET_CURRENT_USER, GET_ERRORS } from './types';\nimport setJWTToken from '../securityUtils/setJWTToken';\nimport JwtDecode from 'jwt-decode';\n\nexport const createNewUser = (newUser, history) => async dispatch => {\n\n    try {\n        \n        await axios.post('/api/users/register', newUser);\n        history.push(\"/login\");\n\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        });\n\n    } catch (err) {\n\n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        })\n    }\n}\n\nexport const login = LoginRequest => async dispatch => {\n\n    // post login request\n    // extract token\n    // store token in LocalStorage\n    // set token in header\n    // decode token\n    // dispatch\n\n    try {\n\n        const res = await axios.post('/api/users/login', LoginRequest);\n        const { token } = res.data;\n        localStorage.setItem('jwtToken', token);\n        setJWTToken(token);\n        const decoded = JwtDecode(token);\n        dispatch({\n            type: SET_CURRENT_USER,\n            payload: decoded\n        });\n\n    } catch (err) {\n        console.log(err);\n        dispatch({\n            type: GET_ERRORS,\n            payload: err.response.data\n        });\n    }\n}\n\nexport const logout = () => dispatch => {\n\n    localStorage.removeItem('jwtToken');\n    setJWTToken(false);\n\n    dispatch({\n        type: SET_CURRENT_USER,\n        payload: {}\n    });\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { PropTypes } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { logout } from '../../actions/SecurityActions';\n\n\nclass Header extends Component {\n    \n\n    logout = () => {\n        this.props.logout();\n        window.location.href = \"/\";\n    } \n\n    render() {\n\n\n        const {validToken, user} = this.props.security;\n\n        const userIsNotAuthenticated = (\n\n            <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n\n\n                <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/register\">\n                            Sign Up\n                        </Link>\n\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/login\">\n                            Login\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        );\n\n        const userIsAuthenticated = (\n\n            <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/dashboard\">\n                            Dashboard\n                        </Link>\n                    </li>\n                </ul>\n\n                <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/dashboard\">\n                            <i className=\"fas fa-user-circle mr-1\"></i> {user.fullName}\n                        </Link>\n\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/logout\" onClick={this.logout}>\n                            Logout\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        );\n\n        let headerLinks;\n\n\n        if (validToken && user) {\n            headerLinks = userIsAuthenticated;\n        } else {\n            headerLinks = userIsNotAuthenticated;\n        }\n\n\n        return (\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\n                <div className=\"container\">\n                    <Link className=\"navbar-brand\" to=\"/\">\n                        Personal Project Management Tool\n                    </Link>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\n                        <span className=\"navbar-toggler-icon\" />\n                    </button>\n        \n                    {headerLinks}\n\n                </div>\n            </nav>\n        )\n    }\n}\n\nHeader.propTypes = {\n    security: PropTypes.object.isRequired,\n    logout: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    security: state.security\n}); \n\nexport default connect(mapStateToProps, {logout}) (Header);","\nexport const convertDateToBase = dateToConvert => {\n\n    if (dateToConvert !== \"\") {\n        const arr = dateToConvert.split(\"-\");\n        return arr[2] + \"/\" + arr[1] + \"/\" + arr[0];\n    } else {\n        return dateToConvert;\n    }\n}\n\nexport const convertDateFromBase = dateToConvert => {\n \n    if (dateToConvert !== \"\") {\n        const arr = dateToConvert.split(\"/\");\n        return arr[2] + \"-\" + arr[1] + \"-\" + arr[0];\n    } else {\n        return dateToConvert;\n    }\n      \n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createProject } from '../../actions/projectActions';\nimport classnames from 'classnames';\nimport { convertDateToBase } from '../../utils/utils';\n\nclass AddProject extends Component {\n\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            description: \"\",\n            projectName: \"\",\n            projectIdentifier: \"\",\n            start_date: \"\",\n            end_date: \"\",\n            errors: {}\n        }\n    }\n\n    /*componentWillReceiveProps(nextProps) {\n\n        if (nextProps.errors) {\n            this.setState({errors: nextProps.errors});\n        }\n    }*/\n\n    static getDerivedStateFromProps(nextProps, prevState){\n        if(nextProps.errors !== prevState.errors){\n          return { errors: nextProps.errors};\n       }\n       else return null;\n     }\n\n    onChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    }\n\n    onSubmit = event => {\n\n        event.preventDefault();\n\n        const newProject = {\n            description: this.state.description,\n            projectName: this.state.projectName,\n            projectIdentifier: this.state.projectIdentifier,\n            start_date: convertDateToBase(this.state.start_date),\n            end_date: convertDateToBase(this.state.end_date)\n        }\n\n        //console.log(newProject);\n\n        this.props.createProject(newProject, this.props.history);\n    }\n\n    render() {\n\n        const {errors} = this.state;\n\n        return (\n            <div className=\"project\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h5 className=\"display-4 text-center\">Create Project form</h5>\n                            <hr />\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input \n                                        name=\"projectName\" \n                                        value={this.state.projectName}\n                                        type=\"text\" \n                                        className={classnames(\"form-control form-control-lg\", {\"is-invalid\": errors.projectName})}\n                                        placeholder=\"Project Name\" \n                                        onChange={this.onChange}/>\n                                    {\n                                        errors.projectName && (\n                                            <div className=\"invalid-feedback\">\n                                                {errors.projectName}\n                                            </div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <input \n                                        name=\"projectIdentifier\" \n                                        value={this.state.projectIdentifier}\n                                        type=\"text\" \n                                        className={classnames(\"form-control form-control-lg\", {\"is-invalid\": errors.projectIdentifier})}\n                                        placeholder=\"Unique Project ID\"\n                                        onChange={this.onChange}/>\n                                    {\n                                        errors.projectIdentifier && (\n                                            <div className=\"invalid-feedback\">\n                                                {errors.projectIdentifier}\n                                            </div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <textarea \n                                        name=\"description\" \n                                        value={this.state.description}\n                                        className={classnames(\"form-control form-control-lg\", {\"is-invalid\": errors.description})}\n                                        placeholder=\"Project Description\"\n                                        onChange={this.onChange}>\n                                        \n                                    </textarea>\n                                    {\n                                        errors.description && (\n                                            <div className=\"invalid-feedback\">\n                                                {errors.description}\n                                            </div>\n                                        )\n                                    }\n                                </div>\n                                <h6>Start Date</h6>\n                                <div className=\"form-group\">\n                                    <input \n                                        type=\"date\" \n                                        className=\"form-control form-control-lg\" \n                                        name=\"start_date\" \n                                        value={this.state.start_date}\n                                        onChange={this.onChange}\n                                        />\n                                </div>\n                                <h6>Estimated End Date</h6>\n                                <div className=\"form-group\">\n                                    <input \n                                        type=\"date\" \n                                        className=\"form-control form-control-lg\" \n                                        name=\"end_date\" \n                                        value={this.state.end_date}\n                                        onChange={this.onChange}\n                                        />\n                                </div>\n        \n                                <input \n                                    type=\"submit\" \n                                    className=\"btn btn-primary btn-block mt-4\" \n                                    />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nAddProject.propTypes = {\n    createProject: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    errors: state.errors\n});\n\nexport default connect(mapStateToProps, {createProject})(AddProject);","import { GET_ERRORS } from '../actions/types';\n\nconst initialState = {};\n\nconst ErrorReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case GET_ERRORS:\n            return action.payload;\n\n        default:\n            return state;\n    }\n}\n\nexport default ErrorReducer;","import { GET_PROJECTS, GET_PROJECT, DELETE_PROJECT } from \"../actions/types\";\n\nconst initialState = {\n    projects: [],\n    project: {}\n}\n\nconst ProjectReducer = (state = initialState, action) => {\n\n    switch(action.type) {\n\n        case GET_PROJECTS:\n            return {\n                ...state,\n                projects: action.payload\n            }\n\n        case GET_PROJECT:\n            return {\n                ...state,\n                project: action.payload\n            }\n        \n        case DELETE_PROJECT:\n            return {\n                ...state,\n                projects: state.projects.filter(project => project.projectIdentifier !== action.payload)\n            }\n\n        default:\n            return state;\n    }\n\n}\n\nexport default ProjectReducer;","import { GET_BACKLOG, GET_PROJECT_TASK, DELETE_PROJECT_TASK } from '../actions/types';\n\nconst initialState = {\n    project_tasks: [],\n    project_task: {}\n}\n\nconst BacklogReducer = (state = initialState, action) => {\n\n    switch(action.type) {\n\n        case GET_BACKLOG:\n            return {...state, project_tasks: action.payload};\n        case GET_PROJECT_TASK:\n            return {...state, project_task: action.payload};\n        case DELETE_PROJECT_TASK:\n            return {\n                ...state, \n                project_tasks: state.project_tasks.filter(pt => pt.projectSequence !== action.payload)\n            };\n\n        default:\n            return state;\n    }\n}\n\nexport default BacklogReducer;","import { SET_CURRENT_USER } from '../actions/types';\n\nconst initialState = {\n    user: {},\n    validToken: false\n}\n\nconst booleanActionPayload = payload => {\n    if (payload) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconst SecurityReducer = (state = initialState, action) => {\n\n    switch(action.type) {\n\n        case SET_CURRENT_USER:\n            return {\n                ...state,\n                validToken: booleanActionPayload(action.payload),\n                user: action.payload\n            };\n\n        default:\n            return state;\n    }\n}\n\nexport default SecurityReducer;","import { combineReducers } from \"redux\";\nimport ErrorReducer from './errorReducer';\nimport ProjectReducer from \"./projectReducer\";\nimport BacklogReducer from \"./backlogReducer\";\nimport SecurityReducer from \"./securityReducer\";\n\n\nexport default combineReducers({\n    errors: ErrorReducer,\n    project: ProjectReducer,\n    backlog: BacklogReducer,\n    security: SecurityReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\nconst middleware = [thunk];\n\nconst ReactReduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(); \n\n//const store = createStore(rootReducer, initialState, compose(applyMiddleware(...middleware), ));\nlet store;\n\n\nif (window.navigator.userAgent.includes(\"Chrome\") && ReactReduxDevTools) {\n\n    store = createStore(rootReducer, initialState, compose(applyMiddleware(...middleware), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()));\n\n} else {\n    store = createStore(rootReducer, initialState, compose(applyMiddleware(...middleware)));\n\n\n}\n\nexport default store;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport classnames from 'classnames';\nimport { getProject, createProject } from '../../actions/projectActions';\nimport { convertDateFromBase, convertDateToBase } from '../../utils/utils';\n\nclass UpdateProject extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            id: \"\",\n            projectName: \"\",\n            projectIdentifier: \"\",\n            description: \"\",\n            start_date: \"\",\n            end_date: \"\",\n            errors: {}\n            \n        }\n    }\n\n    componentDidMount() {\n\n        const {id} = this.props.match.params;\n        this.props.getProject(id, this.props.history);\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        if (nextProps.errors) {\n            this.setState({errors: nextProps.errors});\n        }\n\n        const {id, projectName, projectIdentifier, description, start_date, end_date} = nextProps.project;\n\n        this.setState({id, projectName, projectIdentifier, description, start_date: convertDateFromBase(start_date), end_date: convertDateFromBase(end_date)});\n    }\n\n    /*static getDerivedStateFromProps(nextProps, prevState) {\n\n        const {id, projectName, projectIdentifier, description, start_date, end_date} = nextProps.project;\n\n        return {\n            id,\n            projectName,\n            projectIdentifier,\n            description,\n            start_date,\n            end_date\n        }\n\n    }*/\n\n    onChange = event => {\n        this.setState({[event.target.name]: event.target.value});\n    }\n    \n    onSubmit = event => {\n\n        event.preventDefault();\n\n        const updateProject = {\n            id: this.state.id,\n            projectName: this.state.projectName,\n            projectIdentifier: this.state.projectIdentifier,\n            description: this.state.description,\n            start_date: convertDateToBase(this.state.start_date),\n            end_date: convertDateToBase(this.state.end_date)\n        }\n\n\n        this.props.createProject(updateProject, this.props.history);\n    }\n\n    render() {\n\n        const {errors} = this.state;\n        console.log(this.state)\n        \n        return (\n            <div className=\"project\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h5 className=\"display-4 text-center\">Update Project form</h5>\n                            <hr />\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input \n                                        name=\"projectName\"\n                                        value={this.state.projectName}\n                                        onChange={this.onChange}\n                                        type=\"text\" \n                                        className={classnames(\"form-control form-control-lg\", {\"is-invalid\": errors.projectName})} \n                                        placeholder=\"Project Name\" />\n                                    {\n                                        errors.projectName && (\n                                            <div className=\"invalid-feedback\">\n                                                {errors.projectName}\n                                            </div>\n                                        )\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <input \n                                        name=\"projectIdentifier\"\n                                        value={this.state.projectIdentifier}\n                                        onChange={this.onChange}\n                                        type=\"text\" \n                                        className=\"form-control form-control-lg\"\n                                        placeholder=\"Unique Project ID\"\n                                        disabled />\n                                </div>\n                                <div className=\"form-group\">\n                                    <textarea \n                                        name=\"description\"\n                                        value={this.state.description}\n                                        onChange={this.onChange}\n                                        className={classnames(\"form-control form-control-lg\", {\"is-invalid\": errors.description})}\n                                        placeholder=\"Project Description\">                                           \n                                    </textarea>\n                                    {\n                                        errors.description && (\n                                            <div className=\"invalid-feedback\">\n                                                {errors.description}\n                                            </div>\n                                        )\n                                    }\n                                </div>\n                                <h6>Start Date</h6>\n                                <div className=\"form-group\">\n                                    <input \n                                        value={this.state.start_date}\n                                        type=\"date\" \n                                        onChange={this.onChange}\n                                        className=\"form-control form-control-lg\" \n                                        name=\"start_date\" />\n                                </div>\n                                <h6>Estimated End Date</h6>\n                                <div className=\"form-group\">\n                                    <input \n                                        value={this.state.end_date}\n                                        type=\"date\" \n                                        onChange={this.onChange}\n                                        className=\"form-control form-control-lg\" \n                                        name=\"end_date\" />\n                                </div>\n        \n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nUpdateProject.propTypes = {\n    getProject: PropTypes.func.isRequired,\n    createProject: PropTypes.func.isRequired,\n    project: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    project: state.project.project,\n    errors: state.errors\n})\n\n\nexport default connect(mapStateToProps, {getProject, createProject})(UpdateProject);","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom';\nimport { deleteProjectTask } from '../../../actions/backlogActions';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\n\nclass ProjectTask extends Component {\n\n    onDeleteCalling = (backlog_id, pt_id) => {\n        this.props.deleteProjectTask(backlog_id, pt_id);\n    }\n\n    render() {\n\n        const { project_task } = this.props;\n        let priorityString;\n        let priorityClass;\n\n        if (project_task.priority === 1) {\n            priorityClass = 'bg-danger text-light';\n            priorityString = 'HIGH'\n        } \n        else if (project_task.priority === 2) {\n            priorityClass = 'bg-warning text-light';\n            priorityString = 'MEDIUM'\n        } \n        else if (project_task.priority === 3) {\n            priorityClass = 'bg-info text-light';\n            priorityString = 'LOW'\n        } \n        \n        \n        return (\n                    \n            <div className=\"card mb-1 bg-light\">\n        \n                <div className={`card-header text-primary ${priorityClass}`}>\n                    ID: {project_task?.projectSequence} -- Priority: {priorityString}\n                </div>\n                <div className=\"card-body bg-light\">\n                    <h5 className=\"card-title\">{project_task?.summary}</h5>\n                    <p className=\"card-text text-truncate \">\n                        {project_task?.acceptanceCriteria}\n                    </p>\n                    <Link to={`/updateProjectTask/${project_task.projectIdentifier}/${project_task.projectSequence}`} className=\"btn btn-primary\">\n                        View / Update\n                    </Link>\n\n                    <button onClick={() => this.onDeleteCalling(project_task.projectIdentifier, project_task.projectSequence)} className=\"btn btn-danger ml-4\">\n                        Delete\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\nProjectTask.propTypes = {\n    deleteProjectTask: PropTypes.func.isRequired\n}\n\nexport default connect(null, {deleteProjectTask}) (ProjectTask);","import axios from 'axios';\nimport { GET_ERRORS, GET_BACKLOG, GET_PROJECT_TASK, DELETE_PROJECT_TASK } from './types';\n\nexport const addProjectTask = (backlog_id, project_task, history) => async dispatch => {\n\n    try {\n\n        await axios.post(`/api/backlog/${backlog_id}`, project_task);\n        history.push(`/projectBoard/${backlog_id}`);\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        });\n        \n    } catch (error) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: error.response.data\n        });\n    }\n};\n\nexport const getBacklog = backlog_id => async dispatch => {\n\n    try {\n\n        const res = await axios.get(`/api/backlog/${backlog_id}`);\n        dispatch({\n            type: GET_BACKLOG,\n            payload: res.data\n        });\n        \n    } catch (error) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: error.response.data\n        });        \n    }\n};\n\nexport const getProjectTask = (backlog_id, pt_id, history) => async dispatch => {\n\n    try {\n\n        const res = await axios.get(`/api/backlog/${backlog_id}/${pt_id}`);\n        dispatch({\n            type: GET_PROJECT_TASK,\n            payload: res.data\n        });\n\n    } catch (error) {\n\n        history.push('/dashboard');\n        \n    }\n};\n\nexport const updateProjectTask = (backlog_id, pt_id, project_task, history) => async dispatch => {\n\n    try {\n        \n        await axios.patch(`/api/backlog/${backlog_id}/${pt_id}`, project_task);\n        history.push(`/projectBoard/${backlog_id}`);\n        dispatch({\n            type: GET_ERRORS,\n            payload: {}\n        });\n\n    } catch (error) {\n        dispatch({\n            type: GET_ERRORS,\n            payload: error.response.data\n        });        \n    }\n};\n\nexport const deleteProjectTask = (backlog_id, pt_id) => async dispatch => {\n\n    if (window.confirm(`You are deleting project taks : '${pt_id}', this action cannot be undone`)) {\n        await axios.delete(`/api/backlog/${backlog_id}/${pt_id}`);\n        dispatch({\n            type: DELETE_PROJECT_TASK,\n            payload: pt_id\n        })\n    }\n\n\n}; ","import React, { Component } from 'react'\nimport ProjectTask from './ProjectTasks/ProjectTask'\n\nclass Backlog extends Component {\n\n    render() {\n\n        const {project_tasks} = this.props;\n\n        const tasks = project_tasks.map(project_task => (\n            <ProjectTask key={project_task.id} project_task={project_task} />\n        ));\n\n        let todoItems = [];\n        let inProgressItems = [];\n        let doneItems = [];\n\n        for (let i = 0; i<tasks.length; i++) {\n            if (tasks[i].props.project_task.status === 'TO_DO') {\n                todoItems.push(tasks[i]);\n            }\n            else if (tasks[i].props.project_task.status === 'IN_PROGRESS') {\n                inProgressItems.push(tasks[i]);\n            }\n            else if (tasks[i].props.project_task.status === 'DONE') {\n                doneItems.push(tasks[i]);\n            }\n        }\n\n        return (\n\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <div className=\"card text-center mb-2\">\n                            <div className=\"card-header bg-secondary text-white\">\n                                <h3>TO DO</h3>\n                            </div>\n                        </div>\n\n                        {todoItems}\n    \n                        \n                    </div>\n                    \n                    <div className=\"col-md-4\">\n                        <div className=\"card text-center mb-2\">\n                            <div className=\"card-header bg-primary text-white\">\n                                <h3>In Progress</h3>\n                            </div>\n                        </div>\n\n                        {inProgressItems}\n\n                    </div>\n\n                    <div className=\"col-md-4\">\n                        <div className=\"card text-center mb-2\">\n                            <div className=\"card-header bg-success text-white\">\n                                <h3>Done</h3>\n                            </div>\n                        </div>\n\n                        {doneItems}\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Backlog;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport Backlog from './Backlog';\nimport { getBacklog } from '../../actions/backlogActions';\n\nclass ProjectBoard extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            errors: {}\n        }\n    }\n\n    componentDidMount() {\n\n        const { id } = this.props.match.params;\n        this.props.getBacklog(id);\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        if (nextProps.errors) {\n            this.setState({errors: nextProps.errors});\n        }\n    }\n\n    render() {\n\n        const { id } = this.props.match.params;\n        const { project_tasks } = this.props.backlog;\n        const { errors } = this.state;\n        \n        let boardContent;\n\n        const boardAlgo = (errors, project_tasks) => {\n            if (project_tasks.length < 1) {\n                if (errors.projectNotFound) {\n                    return (\n                        <div className=\"alert alert-danger text-center\" role=\"alert\">\n                            {errors.projectNotFound}\n                        </div>\n                    )\n                } else if (errors.projectIdentifier) {\n                    return (\n                        <div className=\"alert alert-danger text-center\" role=\"alert\">\n                            {errors.projectIdentifier}\n                        </div>\n                    )\n                } else {\n                    return (\n                        <div className=\"alert alert-info text-center\" role=\"alert\">\n                            No projects tasks on this board\n                        </div>\n                    )\n                }\n            } else {\n                return (\n                    <Backlog project_tasks={project_tasks} />\n                )\n            }\n        }\n\n        boardContent = boardAlgo(errors, project_tasks);\n\n        return (\n            <div className=\"container\">\n                <Link to={`/addProjectTask/${id}`} className=\"btn btn-primary mb-3\">\n                    <i className=\"fas fa-plus-circle\"> Create Project Task</i>\n                </Link>\n                <br />\n                <hr />\n\n\n                {boardContent}\n                \n            \n            </div>\n        )\n    }\n}\n\nProjectBoard.propTypes = {\n    getBacklog: PropTypes.func.isRequired,\n    backlog: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    backlog: state.backlog,\n    errors: state.errors\n});\n\nexport default connect(mapStateToProps, {getBacklog}) (ProjectBoard);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport classnames from 'classnames';\nimport { addProjectTask } from '../../../actions/backlogActions';\nimport { PropTypes } from 'prop-types';\nimport { convertDateToBase } from '../../../utils/utils';\n\nclass AddProjectTask extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        const { id } = props.match.params;\n\n        this.state = {\n            summary: '',\n            acceptanceCriteria: '',\n            status: '',\n            priority: '0',\n            dueDate: '',\n            projectIdentifier: id,\n            errors: {}\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({errors: nextProps.errors});\n        }\n    }\n\n    onChange = event => {\n\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    onSubmit = event => {\n\n        event.preventDefault();\n\n        const newTask = {\n            summary: this.state.summary,\n            acceptanceCriteria: this.state.acceptanceCriteria,\n            status: this.state.status,\n            priority: this.state.priority,\n            dueDate: convertDateToBase(this.state.dueDate)\n        }\n\n        //console.log(\"newTask = \" + newTask);\n\n        this.props.addProjectTask(this.state.projectIdentifier, newTask, this.props.history);\n    }\n\n    render() {\n\n        const { id } = this.props.match.params;\n        const { errors } = this.state;\n\n        return (\n\n        <div className=\"add-PBI\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-8 m-auto\">\n                        <Link to={`/projectBoard/${id}`} className=\"btn btn-light\">\n                            Back to Project Board\n                        </Link>\n                        <h4 className=\"display-4 text-center\">Add /Update Project Task</h4>\n                        <p className=\"lead text-center\">Project Name + Project Code</p>\n                        <form onSubmit={this.onSubmit}>\n                            <div className=\"form-group\">\n                                <input onChange={this.onChange} value={this.state.summary} type=\"text\" className={ classnames(\"form-control form-control-lg\", {\n                                    \"is-invalid\": errors.summary\n                                })} name=\"summary\" placeholder=\"Project Task summary\" />\n                                {\n                                    errors.summary && (\n                                        <div className=\"invalid-feedback\">\n                                            {errors.summary }\n                                        </div>\n                                    )\n                                }\n                            </div>\n                            <div className=\"form-group\">\n                                <textarea onChange={this.onChange} value={this.state.acceptanceCriteria} className=\"form-control form-control-lg\" placeholder=\"Acceptance Criteria\" name=\"acceptanceCriteria\"></textarea>\n                            </div>\n                            <h6>Due Date</h6>\n                            <div className=\"form-group\">\n                                <input onChange={this.onChange} value={this.state.dueDate} type=\"date\" className=\"form-control form-control-lg\" name=\"dueDate\" />\n                            </div>\n                            <div className=\"form-group\">\n                                <select onChange={this.onChange} value={this.state.priority} className=\"form-control form-control-lg\" name=\"priority\">\n                                    <option value={0}>Select Priority</option>\n                                    <option value={1}>High</option>\n                                    <option value={2}>Medium</option>\n                                    <option value={3}>Low</option>\n                                </select>\n                            </div>\n    \n                            <div className=\"form-group\">\n                                <select onChange={this.onChange} value={this.state.status} className=\"form-control form-control-lg\" name=\"status\">\n                                    <option value=\"\">Select Status</option>\n                                    <option value=\"TO_DO\">TO DO</option>\n                                    <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                    <option value=\"DONE\">DONE</option>\n                                </select>\n                            </div>\n    \n                            <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n        )\n    }\n}\n\nAddProjectTask.protoTypes = {\n    addProjectTask: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\nconst mapstateToProps = state => ({\n    errors: state.errors\n})\n\nexport default connect(mapstateToProps, {addProjectTask}) (AddProjectTask);\n","\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getProjectTask, updateProjectTask } from '../../../actions/backlogActions';\nimport classnames from 'classnames';\nimport { PropTypes } from 'prop-types';\nimport { convertDateToBase, convertDateFromBase } from '../../../utils/utils';\n\nclass UpdateProjectTask extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            id: \"\",\n            projectSequence: \"\",\n            summary: \"test\",\n            acceptanceCriteria: \"\",\n            status: \"\",\n            priority: \"\",\n            dueDate: \"\",\n            projectIdentifier: \"\",\n            create_At: \"\",\n            errors: {}\n        }\n    }\n\n    componentDidMount() {\n\n        const {backlog_id, pt_id} = this.props.match.params;\n        this.props.getProjectTask(backlog_id, pt_id, this.props.history);\n    }\n\n    componentWillReceiveProps(nextProps) {\n\n        if (nextProps.errors) {\n            this.setState({errors: nextProps.errors});\n        }\n        \n        const {\n            id,\n            projectSequence,\n            summary,\n            acceptanceCriteria,\n            status,\n            priority,\n            dueDate,\n            projectIdentifier,\n            create_At            \n        } = nextProps.project_task;\n\n        this.setState({            \n            id,\n            projectSequence,\n            summary,\n            acceptanceCriteria,\n            status,\n            priority,\n            dueDate: convertDateFromBase(dueDate),\n            projectIdentifier,\n            create_At: convertDateFromBase(create_At) });\n    }\n\n    onChange = event => {\n\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    onSubmit = event => {\n\n        event.preventDefault();\n\n        const updatedProjectTask = {\n            id: this.state.id,\n            projectSequence: this.state.projectSequence,\n            summary: this.state.summary,\n            acceptanceCriteria: this.state.acceptanceCriteria,\n            status: this.state.status,\n            priority: this.state.priority,\n            dueDate: convertDateToBase(this.state.dueDate),\n            projectIdentifier: this.state.projectIdentifier,\n            create_At: convertDateToBase(this.state.create_At)\n        }\n\n\n        this.props.updateProjectTask(this.state.projectIdentifier, this.state.projectSequence, updatedProjectTask, this.props.history);\n    }\n\n    render() {\n\n        const {errors} = this.state;\n\n        return (\n            <div className=\"add-PBI\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <Link to={`/projectBoard/${this.state.projectIdentifier}`} className=\"btn btn-light\">\n                                Back to Project Boa\n                            </Link>\n                            <h4 className=\"display-4 text-center\">Add /Update Project Task</h4>\n                            <p className=\"lead text-center\">Project Name: {this.state.projectIdentifier} | Project Task ID: { this.state.projectSequence}</p>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input \n                                        onChange={this.onChange} \n                                        value={this.state.summary} \n                                        type=\"text\" \n                                        className={classnames(\"form-control form-control-lg\", {'is-invalid': errors.summary} )}\n                                        name=\"summary\" \n                                        placeholder=\"Project Task summary\" />\n                                    {\n                                        errors.summary &&\n                                        <div className=\"invalid-feedback\">{errors.summary}</div>\n                                    }\n                                </div>\n                                <div className=\"form-group\">\n                                    <textarea \n                                        onChange={this.onChange}  \n                                        value={this.state.acceptanceCriteria} \n                                        className=\"form-control form-control-lg\" \n                                        placeholder=\"Acceptance Criteria\" \n                                        name=\"acceptanceCriteria\">                                        \n                                    </textarea>\n                                </div>\n                                <h6>Due Date</h6>\n                                <div className=\"form-group\">\n                                    <input onChange={this.onChange}  value={this.state.dueDate} type=\"date\" className=\"form-control form-control-lg\" name=\"dueDate\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <select onChange={this.onChange}  value={this.state.priority} className=\"form-control form-control-lg\" name=\"priority\">\n                                        <option value={0}>Select Priority</option>\n                                        <option value={1}>High</option>\n                                        <option value={2}>Medium</option>\n                                        <option value={3}>Low</option>\n                                    </select>\n                                </div>\n        \n                                <div className=\"form-group\">\n                                    <select onChange={this.onChange}  value={this.state.status} className=\"form-control form-control-lg\" name=\"status\">\n                                        <option value=\"\">Select Status</option>\n                                        <option value=\"TO_DO\">TO DO</option>\n                                        <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                        <option value=\"DONE\">DONE</option>\n                                    </select>\n                                </div>\n        \n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nUpdateProjectTask.propTypes = {\n    getProjectTask: PropTypes.func.isRequired,\n    updateProjectTask: PropTypes.func.isRequired,\n    project_task: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    project_task: state.backlog.project_task,\n    errors: state.errors\n})\n\nexport default connect(mapStateToProps, {getProjectTask, updateProjectTask}) (UpdateProjectTask);","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\n\n\nclass Landing  extends Component {\n\n\n    componentDidMount() {\n        \n        if (this.props.security.validToken) {\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n\n    render() {\n        \n        return (\n            <div className=\"landing\">\n                <div className=\"light-overlay landing-inner text-dark\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12 text-center\">\n                                <h1 className=\"display-3 mb-4\">Personal Project Management Tool</h1>\n                                <p className=\"lead\">\n                                    Create your account to join active projects or start you own\n                                </p>\n                                <hr />\n                                \n                                <Link className=\"btn btn-lg btn-primary mr-2\" to=\"/register\">\n                                    Sign Up\n                                </Link>\n                                <Link to=\"/login\" className=\"btn btn-lg btn-secondary mr-2\">\n                                    Login\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    \n        )\n    }\n}\n\nLanding.propTypes = {\n    security: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    security: state.security\n})\n\nexport default connect(mapStateToProps, {}) (Landing);","\nimport React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createNewUser } from '../../actions/SecurityActions';\nimport classnames from 'classnames';\n\n\nclass Register extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            username: \"\",\n            fullName: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n            errors: {}\n        }\n    }\n\n    componentDidMount() {\n        \n        if (this.props.security.validToken) {\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n\n    componentWillReceiveProps(nexProps) {\n        if (nexProps.errors) {\n            this.setState({errors: nexProps.errors});\n        }\n    }\n\n    onChange = event => {\n\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    onSubmit = event => {\n\n        event.preventDefault();\n\n        const newUser = {\n            username: this.state.username,\n            fullName: this.state.fullName,\n            password: this.state.password,\n            confirmPassword: this.state.confirmPassword           \n        }\n\n        this.props.createNewUser(newUser, this.props.history);\n    }\n\n    render() {\n\n        const {errors} = this.state;\n\n        return (\n            <div className=\"register\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Sign Up</h1>\n                            <p className=\"lead text-center\">Create your Account</p>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input \n                                        type=\"text\" \n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.fullName\n                                        })} \n                                        placeholder=\"Full Name\" \n                                        name=\"fullName\"\n                                        value={this.state.fullName}\n                                        onChange={this.onChange}\n                                    />\n                                        {\n                                            errors.fullName && (\n                                            <div className=\"invalid-feedback\">{errors.fullName}</div>\n                                            )\n                                        }\n                                </div>\n                                <div className=\"form-group\">\n                                    <input \n                                        type=\"text\" \n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.username\n                                        })} \n                                        placeholder=\"Email Address\" \n                                        value={this.state.username}\n                                        onChange={this.onChange}\n                                        name=\"username\" />\n                                        {\n                                            errors.username && (\n                                            <div className=\"invalid-feedback\">{errors.username}</div>\n                                            )\n                                        }\n        \n                                </div>\n                                <div className=\"form-group\">\n                                    <input \n                                        type=\"password\" \n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.password\n                                        })} \n                                        placeholder=\"Password\" \n                                        value={this.state.password}\n                                        onChange={this.onChange}\n                                        name=\"password\" />\n                                        {\n                                            errors.password && (\n                                            <div className=\"invalid-feedback\">{errors.password}</div>\n                                            )\n                                        }\n                                </div>\n                                <div className=\"form-group\">\n                                    <input \n                                        type=\"password\" \n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.confirmPassword\n                                        })} \n                                        placeholder=\"Confirm Password\"\n                                        value={this.state.confirmPassword}\n                                        onChange={this.onChange}\n                                        name=\"confirmPassword\" />\n                                        {\n                                            errors.confirmPassword && (\n                                            <div className=\"invalid-feedback\">{errors.confirmPassword}</div>\n                                            )\n                                        }\n                                </div>\n                                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nRegister.propTypes = {\n    createNewUser: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    security: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    errors: state.errors,\n    security: state.security\n});\n\nexport default  connect(mapStateToProps, {createNewUser}) (Register);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\nimport classnames from 'classnames';\nimport { login } from '../../actions/SecurityActions';\n\nclass Login extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            username: \"\",\n            password: \"\",\n            errors: {}\n        }\n    }\n\n    componentDidMount() {\n        \n        if (this.props.security.validToken) {\n            this.props.history.push(\"/dashboard\");\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.security.validToken) {\n            this.props.history.push('/dashboard');\n        }\n\n        if (nextProps.errors) {\n            this.setState({errors: nextProps.errors});\n        }\n    }\n\n    onChange = event => {\n        this.setState({[event.target.name]: event.target.value})\n    }\n\n    onSubmit = event => {\n\n        event.preventDefault();\n\n        const LoginRequest = {\n            username: this.state.username,\n            password: this.state.password\n        }\n\n        this.props.login(LoginRequest);\n    }\n\n    render() {\n\n        const {errors} = this.state;\n\n        return (\n            <div className=\"login\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h1 className=\"display-4 text-center\">Log In</h1>\n                            <form onSubmit={this.onSubmit}>\n                                <div className=\"form-group\">\n                                    <input \n                                        value={this.state.username}\n                                        onChange={this.onChange}\n                                        type=\"text\" \n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.username\n                                        }) }\n                                        placeholder=\"Email Address\" \n                                        name=\"username\" />\n                                        { errors.username && <div className=\"invalid-feedback\">{errors.username}</div>}\n                                </div>\n                                <div className=\"form-group\">\n                                    <input \n                                        value={this.state.password}\n                                        onChange={this.onChange}\n                                        type=\"password\" \n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.password\n                                        }) }\n                                        placeholder=\"Password\" \n                                        name=\"password\" />\n                                        { errors.password && <div className=\"invalid-feedback\">{errors.password}</div>}\n                                </div>\n                                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nLogin.propTypes = {\n    login: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired,\n    security: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    errors: state.errors,\n    security: state.security\n});\n\n\nexport default connect(mapStateToProps, {login})(Login);","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { PropTypes } from 'prop-types';\n\nconst SecureRoute = ({component: Component, security, ...otherProps}) => (\n    <Route {...otherProps} render={props => security.validToken === true ?  (<Component {...props} />) : (<Redirect to=\"/login\" />)} />\n)\n\nSecureRoute.propTypes = {\n    security: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    security: state.security\n});\n\nexport default connect(mapStateToProps, {}) (SecureRoute);\n","import React from 'react';\nimport './App.css';\nimport Dashboard from './components/Dashboard';\nimport Header from './components/Layout/Header';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport AddProject from './components/Project/AddProject';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport UpdateProject from './components/Project/UpdateProject';\nimport ProjectBoard from './components/ProjectBoard/ProjectBoard';\nimport AddProjectTask from './components/ProjectBoard/ProjectTasks/AddProjectTask';\nimport UpdateProjectTask from './components/ProjectBoard/ProjectTasks/UpdateProjectTask';\nimport Landing from './components/Layout/Landing';\nimport Register from './components/UserManagement/Register';\nimport Login from './components/UserManagement/Login';\nimport JwtDecode from 'jwt-decode';\nimport setJWTToken from './securityUtils/setJWTToken';\nimport { SET_CURRENT_USER } from './actions/types';\nimport { logout } from './actions/SecurityActions';\nimport SecureRoute from './securityUtils/SecureRoute';\n\nconst jwtToken = localStorage.getItem('jwtToken');\n\nif (jwtToken) {\n  setJWTToken(jwtToken);\n  const decoded_jwtToken = JwtDecode(jwtToken);\n  store.dispatch({\n    type: SET_CURRENT_USER,\n    payload: decoded_jwtToken\n  });\n\n  const currentTime = Date.now()/1000;\n  if (decoded_jwtToken.exp <currentTime) {\n    store.dispatch(logout());\n    window.location.href = \"/\";\n  }\n}\n\nfunction App() {\n  return (\n\n    <Provider store={store}>\n      <Router>\n        <div className=\"App\">\n            <Header/>\n\n            {\n                // public route\n                <>\n                  <Route exact path=\"/\" component={Landing}/>\n                  <Route exact path=\"/register\" component={Register} />\n                  <Route exact path=\"/login\" component={Login} />\n                </>\n            }\n            {\n              // private route\n\n            }\n            <Switch>\n\n              <SecureRoute exact path=\"/dashboard\" component={Dashboard}/>\n              <SecureRoute exact path=\"/addProject\" component={AddProject}/>\n              <SecureRoute exact path=\"/updateProject/:id\" component={UpdateProject}/>\n              <SecureRoute exact path=\"/projectBoard/:id\" component={ProjectBoard}/>\n              <SecureRoute exact path=\"/addProjectTask/:id\" component={AddProjectTask}/>\n              <SecureRoute exact path=\"/updateProjectTask/:backlog_id/:pt_id\" component={UpdateProjectTask}/>\n\n            </Switch>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}